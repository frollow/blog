name: wobidobi prod workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r blog/requirements.txt --no-cache-dir

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.PROD_DOCKER_USERNAME }}
          password: ${{ secrets.PROD_DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: blog/
          push: true
          tags: ${{ secrets.PROD_DOCKER_USERNAME }}/${{ secrets.PROD_DOCKER_PROGECT_NAME }}:latest

  copy_docker_compose_file:
    name: SCP files to server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_HOST_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PROD_HOST_PORT }}
          source: "docker-compose.yml,nginx.conf,configs/site.conf"
          target: "/opt/infra/"

  deploy:
    runs-on: ubuntu-latest
    needs: copy_docker_compose_file
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_HOST_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PROD_HOST_PORT }}
          script: |
            echo "Creating .env file on server"
            cat <<EOF > /opt/infra/.env
            DJANGO_ENV=production
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            ALLOWED_HOSTS=${{ secrets.PROD_ALLOWED_HOSTS }}
            INTERNAL_IPS=${{ secrets.PROD_INTERNAL_IPS }}
            RECAPTCHA_PUBLIC_KEY=${{ secrets.PROD_RECAPTCHA_PUBLIC_KEY }}
            RECAPTCHA_PRIVATE_KEY=${{ secrets.PROD_RECAPTCHA_PRIVATE_KEY }}
            OPENAI_API_KEY=${{ secrets.PROD_OPENAI_API_KEY }}
            DEBUG=${{ secrets.PROD_DEBUG }}
            DB_NAME=${{ secrets.PROD_DB_NAME }}
            DB_HOST=${{ secrets.PROD_DB_HOST }}
            POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
            DB_PORT=${{ secrets.PROD_DB_PORT }}
            CELERY_BROKER_URL=${{ secrets.PROD_CELERY_BROKER_URL }}
            CELERY_RESULT_BACKEND=${{ secrets.PROD_CELERY_RESULT_BACKEND }}
            CELERY_SINGLETON_BACKEND_URL=${{ secrets.PROD_CELERY_SINGLETON_BACKEND_URL }}
            DJANGO_SUPERUSER_USERNAME=${{ secrets.PROD_DJANGO_SUPERUSER_USERNAME }}
            DJANGO_SUPERUSER_PASSWORD=${{ secrets.PROD_DJANGO_SUPERUSER_PASSWORD }}
            DJANGO_SUPERUSER_EMAIL=${{ secrets.PROD_DJANGO_SUPERUSER_EMAIL }}
            EOF
            echo "Starting Docker Compose"
            sudo docker login -u ${{ secrets.PROD_DOCKER_USERNAME }} -p ${{ secrets.PROD_DOCKER_PASSWORD }}
            sudo docker compose -f /opt/infra/docker-compose.yml up -d
            sudo docker logout


  remove_old_docker_images:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_HOST_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PROD_HOST_PORT }}
          script: |
            sudo docker image prune -a -f
